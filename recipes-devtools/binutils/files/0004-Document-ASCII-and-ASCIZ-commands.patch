From df1921bd3c07c59fab2f352a5f75961ce631034f Mon Sep 17 00:00:00 2001
From: Ulf Samuelsson <ulf@emagii.com>
Date: Tue, 7 Feb 2023 19:21:26 +0100
Subject: [PATCH 4/4] Document ASCII and ASCIZ commands

Signed-off-by: Ulf Samuelsson <ulf@emagii.com>
---
 ld/ld.texi | 31 ++++++++++++++++++++++++++-----
 1 file changed, 26 insertions(+), 5 deletions(-)

diff --git a/ld/ld.texi b/ld/ld.texi
index fc75e9b3..92f4967c 100644
--- a/ld/ld.texi
+++ b/ld/ld.texi
@@ -5240,23 +5240,32 @@ C identifiers because they contain a @samp{.} character.
 @cindex data
 @cindex section data
 @cindex output section data
+@kindex ASCII @var{size}, @var{string}
+@kindex ASCIZ @var{string}
 @kindex BYTE(@var{expression})
 @kindex SHORT(@var{expression})
 @kindex LONG(@var{expression})
 @kindex QUAD(@var{expression})
 @kindex SQUAD(@var{expression})
 You can include explicit bytes of data in an output section by using
-@code{BYTE}, @code{SHORT}, @code{LONG}, @code{QUAD}, or @code{SQUAD} as
-an output section command.  Each keyword is followed by an expression in
-parentheses providing the value to store (@pxref{Expressions}).  The
-value of the expression is stored at the current value of the location
-counter.
+@code{BYTE}, @code{SHORT}, @code{LONG}, @code{QUAD}, @code{SQUAD}, @code{ASCII}
+or @code{ASCIZ} as an output section command.
+  Each keyword is followed by an expression in parentheses providing the value
+to store (@pxref{Expressions}).  The value of the expression is stored at the
+current value of the location counter.
 
 The @code{BYTE}, @code{SHORT}, @code{LONG}, and @code{QUAD} commands
 store one, two, four, and eight bytes (respectively).  After storing the
 bytes, the location counter is incremented by the number of bytes
 stored.
 
+The @code{ASCII} and @code{ASCIZ} commands store a zero-terminated string as
+an output section command.
+The @code{ASCII} stores a fixed size string with the size specified in
+an expression. The string is filled with zeroes if it is not long enough.
+The @code{ASCIZ} stores a zero-terminated string with the length determined
+by the string itself.
+
 For example, this will store the byte 1 followed by the four byte value
 of the symbol @samp{addr}:
 @smallexample
@@ -5270,6 +5279,16 @@ target are 32 bits, an expression is computed as 32 bits.  In this case
 @code{QUAD} stores a 32 bit value zero extended to 64 bits, and
 @code{SQUAD} stores a 32 bit value sign extended to 64 bits.
 
+For strings, this will create a 20 byte area, even though the string is shorter.
+@smallexample
+ASCII 20, "This is a string"
+@end smallexample
+
+The second string example will create an areas which exactly fits the string.
+@smallexample
+ASCIZ     "This is another string"
+@end smallexample
+
 If the object file format of the output file has an explicit endianness,
 which is the normal case, the value will be stored in that endianness.
 When the object file format does not have an explicit endianness, as is
@@ -5286,6 +5305,8 @@ whereas this will work:
 SECTIONS @{@ .text : @{@ *(.text) ; LONG(1) @}@ .data : @{@ *(.data) @}@ @}@
 @end smallexample
 
+
+
 @kindex FILL(@var{expression})
 @cindex holes, filling
 @cindex unspecified memory
-- 
2.17.1

